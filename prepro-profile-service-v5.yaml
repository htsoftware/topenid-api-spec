openapi: 3.0.1
info:
  title: Profile service
  version: v5
servers:
  - url: Please follow the release note for further information
tags:
  - name: Account APIs
  - name: OTP APIs
  - name: Consents APIs
  - name: Contact Info APIs
  - name: Topen Info APIs
  - name: Topen Configuration APIs
  - name: Master Data
paths:
  "/accounts/send-invitation":
    post:
      tags:
        - Account APIs
      operationId: sendInvitation
      summary: Allows sending the onboarding invitation to users via SMS/EMAIL
      description: This API allows sending the onboarding invitation to users via SMS/EMAIL
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SendInvitationRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        type: string
              example:
                data: null
                message: The request completed successfully
                code: null
                status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code: Message |
            | -- |
            | 200001: channel cannot be blank |
            | 200001: receiver cannot be blank |
            | 200002: Invalid receiver format |
            | 200003: channel isn't in supported list |
            | 203047: The invitation message template has not been created |
          content:
            application/json:
              example:
                message: channel cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code: Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '500':
          description: |
            **Internal server error**
            | Error Code: Message |
            | -- |
            | 100500: Error detail message |
  "/accounts/register":
    post:
      tags:
        - Account APIs
      operationId: registerAccount
      summary: Register an account with a verified phone number
      description: "Register an account with a verified phone number. TopenID only
        supports phone-based registration. That means users need to verify their phone
        number upon the request for registration. For registration, TopenID guides
        processing with 3 steps with client access token:\n 1. Verify the phone number
        registration. RP calls “Verification API” to request generate OTP. \n 2. Verify
        OTP. RP calls “Verify OTP API” to verify user’s phone number. User input the
        received OTP\nwhich sent by TopenID. \n 3. Registration with a verified phone.
        RP calls ”Registration API” to register a new account."
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegistrationWithPhoneRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        properties:
                          ht_id:
                            type: string
              examples:
                update_successful:
                  summary: Registration successful
                  value:
                    data:
                      ht_id: '2828917688328040'
                    message: The request completed successfully
                    code: null
                    status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code: Message |
            | -- |
            | 200001: verification_id cannot be blank |
            | 202004: Incorrect verification |
            | 202002: verification_id cannot be found |
            | 202006: phone has been set as the primary contact of another account |
            | 200001: first_name cannot be blank |
            | 200004: first_name's length must be less than 256 |
            | 200001: last_name cannot be blank |
            | 200004: last_name's length must be less than 256 |
            | 200001: password cannot be blank |
            | 200010: Password must be between 8 and 30 characters, contain a digit[0-9], a lower case letter[a-z], an upper case letter[A-Z] |
            | 200002: Invalid dob format |
            | 203004: Date of birth must be dd/MM/yyyy or earlier |
            | 200003: gender isn't in supported list |
            | 200001: consent_receipt cannot be blank |
            | 203022: Invalid consent receipt |
          content:
            application/json:
              example:
                message: verification_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code: Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '500':
          description: |
            **Internal server error**
            | Error Code: Message |
            | -- |
            | 100500: Error detail message |
  "/accounts/exist":
    post:
      tags:
        - Account APIs
      operationId: checkExistedAccount
      summary: Check the existence of an accountid
      description: This API allows RP to check the existence of an accountid. If the "used" field is TRUE in the response then that accountID has existed.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CheckingAccountRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/CheckingAccountResponse"
              examples:
                checking_successful:
                  summary: Checking account successful
                  value:
                    data:
                      - used: true
                        checking_at: 1625454349735
                    message: The request completed successfully
                    code: null
                    status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  account_id cannot be blank |
            | 200002:  Invalid account_id format |
          content:
            application/json:
              example:
                message: account_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code: Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '500':
          description: |
            **Internal server error**
            | Error Code: Message |
            | -- |
            | 100500: Error detail message |
  "/accounts/update-password":
    put:
      tags:
        - Account APIs
      security:
        - bearerAuth: []
      operationId: updatePassword
      summary: Update the password of users
      description: This API allows updating the password of users
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePasswordRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/UpdatePasswordResponse"
              examples:
                update_successful:
                  summary: Update Successful
                  value:
                    data:
                      ht_id: '2828917688328040'
                    message: The request completed successfully
                    code: null
                    status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code: Message |
            | -- |
            | 200001: current_password cannot be blank |
            | 200001: new_password cannot be blank |
            | 200010: Password must be between 8 and 30 characters, contain a digit[0-9], a lower case letter[a-z], an upper case letter[A-Z] |
            | 201001: The new password cannot be the same as the current password |
            | 203001: The Current Password is incorrect |
          content:
            application/json:
              example:
                message: current_password cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code: Message |
            | -- |
            | 203015: Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code: Message |
            | -- |
            | 203016: Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code: Message |
            | -- |
            | 101101: User profile was not found |
        '500':
          description: |
            **Internal server error**
            | Error Code: Message |
            | -- |
            | 100500: Error detail message |
  "/accounts/self-reset-password":
    put:
      tags:
        - Account APIs
      operationId: resetPassword
      summary: Reset the password of users when they forgot the password
      description: This API allows resetting the password of users when they forgot the password
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResetPasswordRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        nullable: true
                        example:
              examples:
                reset-password-successful:
                  summary: RP reset password for user successful
                  value:
                    status: SUCCESS
                    code: null
                    message: The request completed successfully
                    data: null
        '400':
          description: |
            **Bad Request**
            | Error Code: Message |
            | -- |
            | 200001: verification_id cannot be blank |
            | 200001: password cannot be blank |
            | 200010: Password must be between 8 and 30 characters, contain a digit[0-9], a lower case letter[a-z], an upper case letter[A-Z] |
            | 202004: Incorrect verification |
          content:
            application/json:
              example:
                message: verification_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code: Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '500':
          description: |
            **Internal server error**
            | Error Code: Message |
            | -- |
            | 100500: Error detail message |
  "/accounts/force-password-reset":
    put:
      tags:
        - Account APIs
      operationId: forceResetPassword
      summary: Force reset passwords when their password is expired
      description: This API allows RP to force reset passwords when their password is expired
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ForceResetPasswordRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        nullable: true
                        example:
              examples:
                reset-password-successful:
                  summary: RP reset password for user successful
                  value:
                    status: SUCCESS
                    code: null
                    message: The request completed successfully
                    data: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  username cannot be blank |
            | 200001:  current_password cannot be blank |
            | 200001:  new_password cannot be blank |
            | 200010:  Password must be between 8 and 30 characters, contain a digit[0-9], a lower case letter[a-z], an upper case letter[A-Z] |
            | 201001:  The new password cannot be the same as the current password |
            | 203035:  Invalid user credentials |
          content:
            application/json:
              example:
                message: username cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  username cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/consent/purposes/relying-party":
    get:
      tags:
        - Consents APIs
      operationId: getConsentByReplyingParty
      summary: Fetch the consent list to get user approval
      description: This API allows to fetch the consent list to get user approval.
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          "$ref": "#/components/schemas/SubscriptionConsentDto"
              examples:
                retrieve_successful:
                  summary: Retrieve available consent items successful
                  value:
                    status: SUCCESS
                    code: null
                    message: The request completed successfully
                    data:
                      - id: 6127092044a4750a8bd857ba
                        name: Basic info sharing
                        description: Basic info sharing
                        mandatory: true
                        owner: TopenId
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/accounts/{ht_id}/consent-receipts":
    get:
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: ht_id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Consents APIs
      operationId: getConsentReceiptByHtId
      summary: Fetch the consent receipt list of user
      description: This API allows to fetch the consent receipt list of user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          "$ref": "#/components/schemas/ConsentReceiptResponse"
              examples:
                retrieve_successful:
                  summary: Retrieve available consent receipts successful
                  value:
                    status: SUCCESS
                    code: null
                    message: The request completed successfully
                    data:
                      - id: 6127092044a4750a8bd857ba
                        name: Thông tin tài khoản
                        description: Truy xuất thông tin tài khoản TopenID
                        consented_date: 1625454349735
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  ht_id cannot be blank |
          content:
            application/json:
              example:
                message: ht_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  ht_id cannot be found |
            | 200007:  The requested resource cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/verifications":
    post:
      security:
        - bearerAuth: []
      tags:
        - OTP APIs
      operationId: createVerification
      summary: Generate and deliver OTP to receiver via 2 channels (phone or email)
      description: |-
        The API allows to generate and deliver OTP to receiver via 2 channels (phone or email) with template_codes:
        - Template code for email: EMAIL_OTP_REQUESTED_012
        - Template code for phone: SMS_OTP_REQUESTED_012
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerificationCreationRequest"
            example:
              receiver: '0377884111'
              channel: PHONE
              template_code: SMS_OTP_REQUESTED_012
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: |
            Bearer {client/user access token}
            - When register new account, authorization header should be client access token
            - When update user contact information, authorization header should be user access token
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/VerificationResponse"
              examples:
                create_verification_successful:
                  summary: create verification successful
                  value:
                    status: SUCCESS
                    code: null
                    message: The request completed successfully
                    data:
                      verification:
                        id: 6168e5673e828a5cfc655989
                        ht_id: '1630658722275094'
                        receiver: '0382479888'
                        channel: PHONE
                        verified: 'false'
                        expired_at: '1625454349735'
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  receiver cannot be blank |
            | 200002:  Invalid receiver format |
            | 200001:  channel cannot be blank |
            | 200003:  channel isn't in supported list |
            | 200001:  template_code cannot be blank |
          content:
            application/json:
              example:
                message: receiver cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '429':
          description: |
            **Too Many Requests**
            | Error Code:  Message |
            | -- |
            | 203008:  The number of times requesting to issue OTP have reached the limitation |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/verifications/{verification_id}/verify":
    put:
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: |
            Bearer {client/user access token}
            - When register new account, authorization header should be client access token
            - When update user contact information, authorization header should be user access token
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: verification_id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      tags:
        - OTP APIs
      operationId: updateVerification
      summary: Verify OTP before doing a sensitive action
      description: This API allows to verify OTP before doing a sensitive action
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerificationUpdatedRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/VerificationResponse"
              examples:
                verified_otp_successful:
                  summary: verified otp successful
                  value:
                    status: SUCCESS
                    code: null
                    message: The request completed successfully
                    data:
                      verification:
                        id: 6168e5673e828a5cfc655989
                        ht_id: '1630658722275094'
                        receiver: '0382479888'
                        channel: PHONE
                        verified: 'true'
                        expired_at: '1625454349735'
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  verification_id cannot be blank |
            | 200001:  otp cannot be blank |
            | 202004:  Incorrect verification |
            | 201002:  Incorrect OTP |
          content:
            application/json:
              example:
                message: verification_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  verification_id cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/basic-info":
    get:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: getBasicInfo
      summary: Get basic info of user
      description: This API allows to get basic info of user
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token or TopenX user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/BasicInfoResponseData"
              examples:
                update_successful:
                  summary: Update Successful
                  value:
                    data:
                      ht_id: '2828917688328040'
                      first_name: "string"
                      last_name: "string"
                      dob: "20/01/1990"
                      gender: "MALE"
                      active: true
                    message: The request completed successfully
                    code: null
                    status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 202002:  username cannot be found |
          content:
            application/json:
              example:
                message: Invalid access token
                status: FAILURE
                code: 203015
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
            | 203032:  Lack of valid consent receipt |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
    put:
      security:
        - bearerAuth: []
      tags:
        - Contact Info APIs
      operationId: updateBasicInfo
      summary: Update basic information of user profile
      description: This API allows to update basic information of user profile
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProfileBasicInfoUpdateRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                        example:
              examples:
                update_successful:
                  summary: Update Successful
                  value:
                    data: null
                    message: The request completed successfully
                    code: null
                    status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  first_name cannot be blank |
            | 200004:  first_name's length must be less than 256 |
            | 200001:  last_name cannot be blank |
            | 200004:  last_name's length must be less than 256 |
            | 200001:  gender cannot be blank |
            | 200003:  gender isn't in supported list |
            | 200001:  dob cannot be blank |
            | 200002:  Invalid dob format |
            | 203004:  Date of birth must be dd/MM/yyyy or earlier |
          content:
            application/json:
              example:
                message: first_name cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 101101:  User profile was not found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/contacts":
    get:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: getListContactInfo
      summary: Retrieve contact list (emails, phones, postal addresses) of user profile
      description: This API allows to retrieve contact list (emails, phones, postal
        addresses) of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - PHONE
              - EMAIL
              - POSTAL_ADDRESS
            example: PHONE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/PersonalContactInfoResponse"
              examples:
                default:
                  summary: Type is not passed
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      emails:
                        - id: string
                          primary: true
                          verified: true
                          tags:
                          value: string
                          last_modified_date: 1625454349735
                      phones:
                        - id: string
                          primary: true
                          verified: true
                          tags:
                          value: string
                          last_modified_date: 1625454349735
                      addresses:
                        - id: string
                          primary: true
                          verified: false
                          tags:
                          value: string
                          city: string
                          city_code: string
                          district: string
                          district_code: string
                          ward: string
                          ward_code: string
                          other: string
                          last_modified_date: 1625454349735
                    status: SUCCESS
                    code: null
                type_is_email:
                  summary: Type Email
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      emails:
                        - id: string
                          primary: true
                          verified: true
                          tags:
                          value: string
                          last_modified_date: 1625454349735
                      phones: []
                      addresses: []
                    status: SUCCESS
                    code: null
                type_is_phones:
                  summary: Type Phone
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      phones:
                        - id: string
                          primary: true
                          verified: true
                          tags:
                          value: string
                          last_modified_date: 1625454349735
                      addresses: []
                      emails: []
                    status: SUCCESS
                    code: null
                type_is_address:
                  summary: Type Address
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      addresses:
                        - id: string
                          primary: true
                          verified: true
                          tags:
                          value: string
                          city: string
                          city_code: string
                          district: string
                          district_code: string
                          ward: string
                          ward_code: string
                          other: string
                          last_modified_date: 1625454349735
                      emails: []
                      phones: []
                    status: SUCCESS
                    code: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200003:  type isn't in supported list |
          content:
            application/json:
              example:
                message: type isn't in supported list
                status: FAILURE
                code: 200003
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/phones":
    get:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: getContactPhone
      summary: Retrieve phone list of user profile
      description: This API allows to retrieve phone list of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token or TopenX user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/PhoneContactInfoResponse"
              examples:
                type_is_phone:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      phones:
                        - id: string
                          primary: true
                          verified: true
                          tags:
                          value: '0382477999'
                          last_modified_date: 1625454349735
                    status: SUCCESS
                    code: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 202002:  username cannot be found |
          content:
            application/json:
              example:
                message: username cannot be found
                status: FAILURE
                code: 202002
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
    post:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: addPhoneNumber
      summary: Add phone number to user profile
      description: "This API allows to add phone number to user profile. The adding
        phone flow needs to do 3 steps:\n 1. Verify the phone number. RP calls “Verification
        API” to request generate OTP. \n 2. Complete verifying OTP. RP calls “Verify
        OTP API” to verify user’s phone number. User input the received OTP which
        sent by TopenID. \n 3. Add the verified phone to user profile. RP calls ”API
        POST/contact-management/phones” to add phone to user profile."
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AddPhoneNumberRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/ContactPhoneNumberResponse"
              examples:
                request completed successfully:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    status: SUCCESS
                    code: null
                    data:
                      ht_id: '2828917688328040'
                      phone:
                        id: '4908094882488354'
                        value: '0912345678'
                        primary: false
                        verified: true
                        tags:
                        last_modified_date: 1625454349735
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  verification_id cannot be blank |
            | 202004:  Incorrect verification |
            | 202002:  verification_id cannot be found |
            | 200001:  phone cannot be found |
            | 200002:  Invalid phone format |
            | 202001:  phone has already existed |
          content:
            application/json:
              example:
                message: verification_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  '/contact-management/phones/{phone_id}/verify':
    put:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      summary: Verify a phone number
      description: >-
        This API allows to verify a phone number of user profile. The phone verifying flow needs to do 3 steps:
         1. Verify the phone number with OTP. RP calls “Verification API” to request generate OTP and deliver OTP to the requested phone number.
         2. Complete verifying OTP. RP calls “Verify OTP API” to verify user’s phone number. User input the received OTP which sent by TopenID.
         3. Perform verifying phone number. RP calls “API PUT/contact-management/phones/{phone_id}/verify” to verify phone number.
      operationId: verifyContactPhone
      parameters:
        - name: Client-Token
          in: header
          description: 'Bearer {client access token}'
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'Bearer {user access token}'
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: lang
          in: query
          description: >-
            lang=vi or lang=en (If lang is missing, the default vi language will
            be return)
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: phone_id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactEmailVerificationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseData'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ContactPhoneVerificationResponse'
              examples:
                default:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      phone:
                        id: string
                        primary: false
                        verified: true
                        tags: null
                        value: string
                        last_modified_date: 1625454349735
                    status: SUCCESS
                    code: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001: verification_id cannot be blank |
            | 200001: phone_id cannot be blank |
            | 202004: Incorrect verification |
            | 203046: The phone number has already been verified |
          content:
            application/json:
              example:
                message: verification_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015: Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  phone_id cannot be found |
            | 200007:  The requested resource cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/phones/{phone_id}":
    delete:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: deleteContactPhone
      summary: Delete phone of the profile
      description: Delete phone of the profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: phone_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data: {}
              examples:
                default:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    status: SUCCESS
                    code: null
                    data: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  phone_id cannot be blank |
            | 202005:  Cannot delete a primary contact |
          content:
            application/json:
              example:
                message: phone_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  phone_id cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/emails":
    get:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: getContactEmail
      summary: Retrieve email list of user profile
      description: This API allows to retrieve email list of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/EmailContactInfoResponse"
              examples:
                type_is_email:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      emails:
                        - id: string
                          primary: true
                          verified: true
                          tags: null
                          value: string
                          last_modified_date: 1625454349735
                    status: SUCCESS
                    code: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid access token
                status: FAILURE
                code: 203015
                data: null
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
    post:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: addContactEmail
      summary: Add an email address to user profile
      description: This API allows to add an email address to user profile with the
        unverified status.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContactEmailAddingRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/ContactEmailAddingResponse"
              examples:
                default:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      email:
                        id: string
                        primary: false
                        verified: false
                        tags:
                        value: string
                        last_modified_date: 1625454349735
                    status: SUCCESS
                    code: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  email cannot be blank |
            | 200002:  Invalid email format |
            | 202001:  email has already existed |
          content:
            application/json:
              example:
                message: email cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/emails/{email_id}/verify":
    put:
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: email_id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: verifyContactEmail
      summary: Verify an email address
      description: "This API allows to verify an email address to user profile. The
        email verifying flow needs to do 3 steps:\n 1. Verify the email address with
        OTP. RP calls “Verification API” to request generate OTP and deliver OTP to
        the requested email adding. \n 2. Complete verifying OTP. RP calls “Verify
        OTP API” to verify user’s phone number. User input the received OTP which
        sent by TopenID. \n 3. Perform verifying email address. RP calls “API PUT/contact-management/emails/{email_id}/verify”
        to verify email address."
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContactEmailVerificationRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/ContactEmailVerificationResponse"
              examples:
                default:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      email:
                        id: string
                        primary: false
                        verified: true
                        tags:
                        value: string
                        last_modified_date: 1625454349735
                    status: SUCCESS
                    code: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001: verification_id cannot be blank |
            | 200001: email_id cannot be blank |
            | 202004: Incorrect verification |
            | 203009: The email has already been verified |
          content:
            application/json:
              example:
                message: verification_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015: Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  email_id cannot be found |
            | 200007:  The requested resource cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/emails/{email_id}/set-primary":
    put:
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: email_id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: setPrimaryEmail
      summary: Set primary email of user profile
      description: This API allows to set primary email of user profile
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data: {}
              examples:
                set_primary_email_successful:
                  summary: Set primary email successful
                  value:
                    data: null
                    message: The request completed successfully
                    code: null
                    status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  email_id cannot be blank |
            | 202006:  email has been set as the primary contact of another account |
          content:
            application/json:
              example:
                message: email_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  email_id cannot be found |
            | 200007:  The requested resource cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/emails/{email_id}":
    delete:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: deleteContactEmail
      summary: Delete email of user profile
      description: This API allows to delete email of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: email_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data: {}
              examples:
                default:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    status: SUCCESS
                    code: null
                    data: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  email_id cannot be blank |
            | 202005:  Cannot delete a primary contact |
          content:
            application/json:
              example:
                message: email_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  email_id cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/addresses":
    get:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: getContactAddress
      summary: Retrieve address list of user profile
      description: This API allow to retrieve address list of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/AddressContactInfoResponse"
              examples:
                type_is_email:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      ht_id: '2828917688328040'
                      addresses:
                        - id: string
                          primary: true
                          verified: false
                          tags:
                          value: string
                          city: string
                          city_code: string
                          district: string
                          district_code: string
                          ward: string
                          ward_code: string
                          other: string
                          last_modified_date: 1625454349735
                    status: SUCCESS
                    code: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid access token
                status: FAILURE
                code: 203015
                data: null
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
    post:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: addContactAddress
      summary: Add resident address to user profile
      description: This API allow to add resident address to user profile
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContactAddressAddingRequest"
        required: true
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/ContactAddressResponse"
              examples:
                default:
                  summary: Add address successfully
                  value:
                    message: The request completed successfully
                    status: SUCCESS
                    code: null
                    data:
                      ht_id: '2828917688328040'
                      address:
                        id: string
                        value: string
                        other: string
                        ward_code: string
                        ward: string
                        district_code: string
                        district: string
                        city_code: string
                        city: string
                        primary: false
                        verified: false
                        tags:
                        last_modified_date: 1625454349735
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  detail_address cannot be blank |
            | 200004:  detail_address's length must be less than 256 |
            | 200001:  ward_code cannot be blank |
            | 200001:  district_code cannot be blank |
            | 200001:  city_code cannot be blank |
            | 203005:  Province/City Code <city_code> cannot be found |
            | 203006:  Ward Code <ward_code> and District Code <district_code> were not matched |
            | 203007:  District Code <district_code> and Province/City Code <city_code> were not matched |
          content:
            application/json:
              example:
                message: detail_address cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/addresses/{address_id}/set-primary":
    put:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: setPrimaryAddress
      summary: Set primary address of user profile
      description: This API allows to set primary address of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: address_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data: {}
              examples:
                set_primary_email_successful:
                  summary: Set primary address successful
                  value:
                    data: null
                    message: The request completed successfully
                    code: null
                    status: SUCCESS
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  address_id cannot be blank |
          content:
            application/json:
              example:
                message: address_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  address_id cannot be found |
            | 200007:  The requested resource cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/contact-management/addresses/{address_id}":
    put:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: updateContactAddress
      summary: Update address of user profile
      description: This API allow to update address of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: address_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContactAddressUpdateRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/ContactAddressResponse"
              examples:
                default:
                  summary: Update address successfully
                  value:
                    message: The request completed successfully
                    status: SUCCESS
                    code: null
                    data:
                      ht_id: '2828917688328040'
                      address:
                        id: string
                        value: string
                        other: string
                        ward_code: string
                        ward: string
                        district_code: string
                        district: string
                        city_code: string
                        city: string
                        primary: true
                        verified: false
                        tags:
                        last_modified_date: 1625454349735
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  address_id cannot be blank |
            | 200001:  detail_address cannot be blank |
            | 200004:  detail_address's length must be less than 256 |
            | 200001:  ward_code cannot be blank |
            | 200001:  district_code cannot be blank |
            | 200001:  city_code cannot be blank |
            | 203005:  Province/City Code <city_code> cannot be found |
            | 203006:  Ward Code <ward_code> and District Code <district_code> were not matched |
            | 203007:  District Code <district_code> and Province/City Code <city_code> were not matched |
          content:
            application/json:
              example:
                message: address_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  address_id cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
    delete:
      tags:
        - Contact Info APIs
      security:
        - bearerAuth: []
      operationId: deleteContactAddress
      summary: Delete address of user profile
      description: This API allows to delete address of user profile
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer {user access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
        - name: address_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data: {}
              examples:
                default:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    status: SUCCESS
                    code: null
                    data: null
        '400':
          description: |
            **Bad Request**
            | Error Code:  Message |
            | -- |
            | 200001:  address_id cannot be blank |
          content:
            application/json:
              example:
                message: address_id cannot be blank
                status: FAILURE
                code: 200001
                data: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 203015:  Invalid access token |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
        '403':
          description: |
            **Forbidden**
            | Error Code:  Message |
            | -- |
            | 203016:  Access denied |
        '404':
          description: |
            **Not Found**
            | Error Code:  Message |
            | -- |
            | 202007:  username cannot be found |
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/topen-info/terms":
    get:
      tags:
        - Topen Info APIs
      operationId: getTerms
      summary: Retrieve Terms Info
      description: This API retrieve Terms Info
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/TopenInfoResponse"
              examples:
                success:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      type: TERMS
                      value: String
                    status: SUCCESS
                    code: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/topen-info/privacy":
    get:
      tags:
        - Topen Info APIs
      operationId: getPrivacy
      summary: Retrieve Privacy Info
      description: This API retrieve Privacy Info
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/TopenInfoResponse"
              examples:
                success:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      type: PRIVACY
                      value: String
                    status: SUCCESS
                    code: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/topen-info/topenid-logo":
    get:
      tags:
        - Topen Info APIs
      operationId: getTopenIdLogo
      summary: Retrieve TopenID Logo
      description: This API retrieve TopenID Logo
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/TopenImageResponse"
              examples:
                success:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      type: TOPENID_LOGO
                      value: String Base64
                    status: SUCCESS
                    code: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/topen-info/topen-group-logo":
    get:
      tags:
        - Topen Info APIs
      operationId: getTopenGroupLogo
      summary: Retrieve Topen Group Logo
      description: This API retrieve Topen Group Logo
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/TopenImageResponse"
              examples:
                success:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      type: TOPEN_GROUP_LOGO
                      value: String Base64
                    status: SUCCESS
                    code: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/configurations/password-pattern":
    get:
      tags:
        - Topen Configuration APIs
      operationId: getPasswordPattern
      summary: Retrieve password pattern Info
      description: This API retrieve password pattern Info.
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        "$ref": "#/components/schemas/TopenPasswordPatternResponse"
              examples:
                success:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    data:
                      pattern: password pattern
                      message: Mật khẩu phải có chữ HOA [A-Z], chữ thường [a-z], số [0-9] và từ 8 đến 30 ký tự
                    status: SUCCESS
                    code: null
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/configurations/invitation-template":
    get:
      tags:
        - Topen Configuration APIs
      operationId: getInvitationTemplateByReplyingParty
      summary: Fetch the invitation templates
      description: This API allows RP to fetch the invitation templates.
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          "$ref": "#/components/schemas/InvitationTemplateDto"
              examples:
                retrieve_successful:
                  summary: Retrieve invitation template successful
                  value:
                    status: SUCCESS
                    code: null
                    message: The request completed successfully
                    data:
                      - channel: EMAIL
                        subject: Xin chao
                        content: The invitation template for email
                        brand_name: TOPENLAND
                        last_modified_date: 1625454349735
                      - channel: SMS
                        subject: ""
                        content: The invitation template for the sms
                        brand_name: TOPENLAND
                        last_modified_date: 1625454349735
        '401':
          description: |
            **Unauthorized**
            | Error Code:  Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code:  Message |
            | -- |
            | 100500:  Error detail message |
  "/master-data/addresses":
    get:
      tags:
        - Master Data
      summary: Get all address master data.
      parameters:
        - name: Client-Token
          in: header
          required: true
          schema:
            type: string
          description: Bearer {client access token}
        - name: lang
          in: query
          schema:
            type: string
          description: lang=vi or lang=en (If lang is missing, the default vi language will be return)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ResponseData"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          "$ref": "#/components/schemas/MasterAddressDto"
              examples:
                default:
                  summary: The request completed successfully
                  value:
                    message: The request completed successfully
                    status: SUCCESS
                    code: null
                    data:
                      - city_name: "string"
                        code: "string"
                        districts:
                          - name: "string"
                            code: "string"
                            wards:
                              - name: "string"
                                code: "string"
                                level: "string"
        '401':
          description: |
            **Unauthorized**
            | Error Code: Message |
            | -- |
            | 900901: Invalid authentication information provided |
            | 900902: No authentication information provided |
          content:
            application/json:
              example:
                message: Invalid authentication information provided
                status: FAILURE
                code: 900901
                data: null
        '500':
          description: |
            **Internal server error**
            | Error Code: Message |
            | -- |
            | 100500: Error detail message |
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ResponseData:
      type: object
      properties:
        message:
          type: string
          nullable: true
          example:
        status:
          type: string
          example: SUCCESS
          enum:
            - SUCCESS
            - FAILURE
        code:
          type: string
          nullable: true
          example:
    ErrorResponseData:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          nullable: true
          example:
          description: Data is null when we got an error.
        status:
          type: string
          example: FAILURE
          enum:
            - SUCCESS
            - FAILURE
        code:
          type: string
          description: TBD, error code of detail error.
    RegistrationWithPhoneRequest:
      type: object
      required:
        - verification_id
        - password
        - consent_receipt
      properties:
        verification_id:
          type: string
          example: 617bab262684b5432c0ab9bf
        first_name:
          type: string
          maxLength: 255
          example: Thảo Nguyên
        last_name:
          type: string
          maxLength: 255
          example: Trần
        password:
          type: string
          minLength: 8
          maxLength: 30
          description: Password must be between 8 and 30 characters, contain a digit[0-9],
            a lower case letter[a-z], an upper case letter[A-Z]
          example: hgn5lnshd4A
        gender:
          type: string
          example: FEMALE
          enum:
            - MALE
            - FEMALE
            - OTHER
        dob:
          type: string
          description: Date of birth. In format dd/MM/yyyy.
          example: 20/01/1990
        consent_receipt:
          type: array
          description: A list of consent purpose ID
          items:
            type: string
            example: 61c870402b9c37dfa3220c21
    CheckingAccountRequest:
      type: object
      required:
        - account_id
      properties:
        account_id:
          type: string
          description: Phone number
          example: "0909777888"
    CheckingAccountResponse:
      type: object
      properties:
        used:
          type: boolean
        checking_at:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
    UpdatePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
        new_password:
          type: string
          description: Password must be between 8 and 30 characters, contain a digit[0-9],
            a lower case letter[a-z], an upper case letter[A-Z]
          example: hgn5lnshd4A
    UpdatePasswordResponse:
      type: object
      properties:
        ht_id:
          type: string
    ResetPasswordRequest:
      type: object
      required:
        - verification_id
        - password
      properties:
        verification_id:
          type: string
        password:
          type: string
          description: Password must be between 8 and 30 characters, contain a digit[0-9],
            a lower case letter[a-z], an upper case letter[A-Z]
          example: hgn5lnshd4A
    ForceResetPasswordRequest:
      type: object
      required:
        - username
        - current_password
        - new_password
      properties:
        username:
          type: string
        current_password:
          type: string
        new_password:
          type: string
          description: Password must be between 8 and 30 characters, contain a digit[0-9],
            a lower case letter[a-z], an upper case letter[A-Z]
          example: hgn5lnshd4A
    ConsentReceiptResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        consented_date:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
    VerificationCreationRequest:
      type: object
      required:
        - receiver
        - channel
        - template_code
      properties:
        receiver:
          type: string
          description: Phone or Email receive OTP.
        channel:
          type: string
          enum:
            - PHONE
            - EMAIL
          default: PHONE
        template_code:
          type: string
          example: SMS_OTP_REQUESTED_012
    VerificationUpdatedRequest:
      type: object
      required:
        - otp
      properties:
        otp:
          type: string
          description: The OTP in 6 digits format
    VerificationDto:
      type: object
      properties:
        id:
          type: string
          example: 61665928127684fa3e8698af
        ht_id:
          type: string
          example: '1630658722275094'
        receiver:
          type: string
          description: Request receiver contact.
          example: '0377884111'
        expired_at:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
        channel:
          type: string
          example: PHONE
        verified:
          type: boolean
          example: false
    VerificationResponse:
      type: object
      properties:
        verification:
          "$ref": "#/components/schemas/VerificationDto"
    PersonalContactInfoResponse:
      type: object
      properties:
        ht_id:
          type: string
        addresses:
          type: array
          items:
            "$ref": "#/components/schemas/ContactAddressInfoDto"
        emails:
          type: array
          items:
            "$ref": "#/components/schemas/ContactInfoDto"
        phones:
          type: array
          items:
            "$ref": "#/components/schemas/ContactInfoDto"
    EmailContactInfoResponse:
      type: object
      properties:
        ht_id:
          type: string
        emails:
          type: array
          items:
            "$ref": "#/components/schemas/ContactInfoDto"
    AddressContactInfoResponse:
      type: object
      properties:
        ht_id:
          type: string
        addresses:
          type: array
          items:
            "$ref": "#/components/schemas/ContactAddressInfoDto"
    PhoneContactInfoResponse:
      type: object
      properties:
        ht_id:
          type: string
        phones:
          type: array
          items:
            "$ref": "#/components/schemas/ContactInfoDto"
    ContactInfoDto:
      type: object
      properties:
        id:
          type: string
        primary:
          type: boolean
        verified:
          type: boolean
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - CONTRACT_BASE
              - E_WALLET_BASE
              - NEWS_AD_BASE
        value:
          type: string
        last_modified_date:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
    ContactAddressInfoDto:
      type: object
      properties:
        id:
          type: string
        primary:
          type: boolean
        verified:
          type: boolean
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - CONTRACT_BASE
              - E_WALLET_BASE
              - NEWS_AD_BASE
        value:
          type: string
        city:
          type: string
        city_code:
          type: string
        district:
          type: string
        district_code:
          type: string
        ward:
          type: string
        ward_code:
          type: string
        other:
          type: string
        last_modified_date:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
    ConsentItemInfo:
      type: object
      properties:
        id:
          type: string
        receiver:
          type: string
        expired_at:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
    SubscriptionConsentDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        mandatory:
          type: boolean
        owner:
          type: string
    ProfileBasicInfoUpdateRequest:
      type: object
      required:
        - last_name
        - first_name
        - gender
        - dob
      properties:
        last_name:
          type: string
          maxLength: 255
          example: Đặng
        first_name:
          type: string
          maxLength: 255
          example: Thảo Nguyên
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
          example: FEMALE
        dob:
          type: string
          example: 20/01/1990
    BasicInfoResponseData:
      type: object
      properties:
        code:
          type: string
          nullable: true
          example:
        data:
          type: object
          properties:
            ht_id:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            dob:
              type: string
              example: 20/01/1990
            gender:
              type: string
              enum:
                - MALE
                - FEMALE
                - OTHER
            active:
              type: boolean
        message:
          type: string
          example: The request completed successfully
        status:
          type: string
          enum:
            - SUCCESS
            - FAILURE
      title: Response
    AddPhoneNumberRequest:
      type: object
      required:
        - phone
      properties:
        verification_id:
          type: string
          example: 614d40d34fe1887eac12b98a
        phone:
          type: string
          example: '0912345678'
    ContactPhoneNumberResponse:
      type: object
      properties:
        ht_id:
          type: string
        phone:
          type: object
          required:
            - id
            - value
            - verified
            - primary
            - last_modified_date
          properties:
            id:
              type: string
            value:
              type: string
            verified:
              type: boolean
            primary:
              type: boolean
            tags:
              type: array
              items:
                type: string
                nullable: true
                enum:
                  - CONTRACT_BASE
                  - E_WALLET_BASE
                  - NEWS_AD_BASE
            last_modified_date:
              type: integer
              format: int64
              example: 1625454349735
              description: Unix timestamps in miliseconds.
    ContactAddressDto:
      type: object
      required:
        - id
        - primary
        - verified
        - tags
        - value
        - city
        - city_code
        - district
        - district_code
        - ward
        - ward_code
        - other
        - last_modified_date
      properties:
        id:
          type: string
        primary:
          type: boolean
        verified:
          type: boolean
        tags:
          uniqueItems: true
          type: array
          nullable: true
          items:
            type: string
            enum:
              - CONTRACT_BASE
              - E_WALLET_BASE
              - NEWS_AD_BASE
          description: Tags is Enum or null
        value:
          type: string
        city:
          type: string
        city_code:
          type: string
        district:
          type: string
        district_code:
          type: string
        ward:
          type: string
        ward_code:
          type: string
        other:
          type: string
        last_modified_date:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
    ContactAddressAddingRequest:
      type: object
      required:
        - detail_address
        - ward_code
        - district_code
        - city_code
      properties:
        detail_address:
          type: string
        ward_code:
          type: string
        district_code:
          type: string
        city_code:
          type: string
    ContactAddressUpdateRequest:
      type: object
      required:
        - detail_address
        - ward_code
        - district_code
        - city_code
      properties:
        detail_address:
          type: string
        ward_code:
          type: string
        district_code:
          type: string
        city_code:
          type: string
    ContactAddressResponse:
      type: object
      properties:
        ht_id:
          type: string
        address:
          "$ref": "#/components/schemas/ContactAddressDto"
    ContactEmailVerificationRequest:
      type: object
      required:
        - verification_id
      properties:
        verification_id:
          type: string
    ContactEmailVerificationResponse:
      type: object
      properties:
        ht_id:
          type: string
        email:
          "$ref": "#/components/schemas/ContactInfoDto"
    ContactPhoneVerificationResponse:
      type: object
      properties:
        ht_id:
          type: string
        phone:
          "$ref": "#/components/schemas/ContactInfoDto"
    ContactEmailAddingRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
    ContactEmailAddingResponse:
      type: object
      properties:
        ht_id:
          type: string
        email:
          "$ref": "#/components/schemas/ContactInfoDto"
    TopenInfoResponse:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    TopenPasswordPatternResponse:
      type: object
      properties:
        pattern:
          type: string
        message:
          type: string
    TopenImageResponse:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
          description: Base64
    MasterAddressDto:
      type: object
      properties:
        city_name:
          type: string
        code:
          type: string
        districts:
          type: array
          items:
            "$ref": "#/components/schemas/MasterAddressDistrictDto"
    MasterAddressDistrictDto:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        wards:
          type: array
          items:
            "$ref": "#/components/schemas/MasterAddressWardDto"
    MasterAddressWardDto:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        level:
          type: string
    InvitationTemplateDto:
      type: object
      properties:
        channel:
          type: string
          example: SMS
        subject:
          type: string
          example: '[Hưng Thịnh Land] Mời sử dụng dịch vụ'
        content:
          type: string
          example: 'HUNGTHINH: Chuc mung ban da nhan duoc loi moi trai nghiem ung dung Hung Thịnh Mobile. Truy cap trai nghiem ngay tai: ${link}.'
        brand_name:
          type: string
          example: TOPENLAND
        last_modified_date:
          type: integer
          format: int64
          example: 1625454349735
          description: Unix timestamps in miliseconds.
    SendInvitationRequest:
      type: object
      required:
        - channel
        - receiver
      properties:
        channel:
          type: string
          enum:
            - SMS
            - EMAIL
          example: SMS
        receiver:
          type: string
          description: Request receiver contact.
          example: '0377884111'
        data:
          type: object
          description: Data input into placeholder in the invitation template. Format will follow key:value.
          example: {company: TOPENLAND}
